[{"id":0,"href":"/linux/centos-wifi/","title":"Centos Wifi","section":"Linuxes","content":" centos连接wifi无线网 # # 查看网络设备 $ nmcli dev status DEVICE TYPE STATE CONNECTION wlo1 wifi 已连接 TP-LINK_XXXX enp89s0 ethernet 已连接 enp89s0 # 查看wifi开启状态 $ nmcli radio wifi # 开启/关闭wifi # nmcli radio wifi [on | off ] $ nmcli radio wifi on # 列出附近wifi $ nmcli dev wifi list # 连接wifi # nmcli dev wifi connect \u0026lt;network-ssid\u0026gt; [password \u0026lt;password\u0026gt;] $ nmcli dev wifi connect TP-LINK_XXXX password \u0026#34;88888888\u0026#34; # 断开wifi $ nmcli dev disconnect wlo1 # 查看连接 $ nmcli connection show $ nmcli con show # 删除连接 # nmcli connection delete [id | uuid | path] $ nmcli con delete TP-LINK_XXXX $ nmcli con delete 692c1f60-e5eb-4ff7-84e1-e6a025ae420c "},{"id":1,"href":"/linux/staticip/","title":"Staticip","section":"Linuxes","content":" centos设置静态IP # 设置以太网静态IP # # 修改网卡配置 $ vi /etc/sysconfig/network-scripts/ifcfg-enp89s0 # 修改如下： BOOTPROTO=static ONBOOT=yes IPADDR=192.168.0.18 NETMASK=255.255.255.0 GATEWAY=192.168.0.1 # 重启网卡 $ systemctl restart network 设置wifi连接静态IP # $ vi /etc/sysconfig/network-scripts/ifcfg-TP-LINK_XXXX # 修改BOOTPROTO为static BOOTPROTO=static #开机启用 ONBOOT=yes # 添加IP IPADDR=192.168.0.12 NETMASK=255.255.255.0 GATEWAY=192.168.0.1 # 重启 $ reboot # 查看IP $ ip addr "},{"id":2,"href":"/linux/sysctl/","title":"Sysctl","section":"Linuxes","content":" Linux内核参数 # 通过以下方式，修改内核参数 # 临时修改内核参数 # sysctl -w kernel.parameter=\u0026#34;[$Example]\u0026#34; $ sysctl -w net.ipv4.ip_local_port_range=\u0026#34;10000 65535\u0026#34; $ sysctl -w vm.max_map_count=262144 $ sysctl -w net.ipv4.ip_forward=1 # 修改/proc/sys目录下文件 $ echo 1 \u0026gt; /proc/sys/net/ipv4/ip_forward 通过修改配置文件的方式永久修改内核参数 # 执行以下命令，修改/etc/sysctl.conf文件中的参数 $ vi /etc/sysctl.conf # 执行以下命令，使配置生效 # -p 从指定的文件加载系统参数，如不指定即从/etc/sysctl.conf中加载 $ sysctl -p # sysctl.d目录下配置文件 $ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 fs.inotify.max_user_watches = 524288 fs.inotify.max_user_instances = 16384 vm.max_map_count = 262144 net.core.somaxconn = 65535 EOF $ sysctl -p /etc/sysctl.d/k8s.conf sysctl常用命令 # # 查看所有内存参数 $ sysctl –a # 查看某个内核参数 $ sysctl net.ipv4.ip_forward # 临时修改某个内核参数 $ sysctl -w net.ipv4.ip_forward=1 /proc/sys # /proc/sys下内核文件与配置文件sysctl.conf中变量的对应关系：\n将/proc/sys中的文件转换成sysctl中的变量依据下面两个简单的规则：\n去掉前面部分/proc/sys 将文件名中的斜杠变为点 例如：\n/proc/sys/net/ipv4/ip_forward -\u0026gt; net.ipv4.ip_forward /proc/sys/kernel/hostname -\u0026gt; kernel.hostname 内核参数说明 # 名称 默认值 建议值 描述 fs.file-max 1516209 - 系统允许的文件句柄的最大数目（也就是能打开文件的最大数量），因为连接需要占用文件句柄。注意：/etc/security/limits.conf文件内对nofile的配置（使用ulimit -n查看），还有/etc/security/limits.d/20-nproc.conf文件内对nproc的配置（使用ulimit -u查看），最好配置万这两个参数重启下系统。 net.ipv4.tcp_synack_retries 5 0 表示回应第二个握手包（SYN+ACK包）给客户端IP后，如果收不到第三次握手包（ACK包），进行重试的次数（默认为5）。修改这个参数为0，可以加快回收半连接，减少资源消耗，但是有一个副作用：网络状况很差时，如果对方没收到第二个握手包，可能连接服务器失败，但对于一般网站，用户刷新一次页面即可。根据抓包经验，这种情况很少，但为了保险起见，可以只在被tcp洪水攻击时临时启用这个参数。之所以可以把tcp_synack_retries改为0，因为客户端还有tcp_syn_retries参数，即使服务器端没有重发SYN+ACK包，客户端也会重发SYN握手包。 net.ipv4.tcp_syn_retries 6 1 表示当没有收到服务器端的SYN+ACK包时，客户端重发SYN握手包的次数。 net.ipv4.tcp_max_syn_backlog 1024 20480 半连接队列长度（默认为1024），加大SYN队列长度可以容纳更多等待连接的网络连接数，具体多少数值受限于内存。 fs.inotify.max_user_instances 128 16384 表示每一个real user ID可创建的inotify instatnces的数量上限，默认128。 fs.inotify.max_user_watches 8192 524288 表示同一用户同时可以添加的watch数目（watch一般是针对目录，决定了同时同一用户可以监控的目录数量）。 net.core.somaxconn 128 65535 socket监听（listen）的backlog上限 "}]